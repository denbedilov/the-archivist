import re
import os
import sys
import asyncio
from aiogram import types
from aiogram.types import FSInputFile

from db import (
    get_balance, change_balance, set_role, get_role,
    grant_key, revoke_key, has_key, get_last_history,
    get_top_users, get_all_roles, reset_user_balance,
    reset_all_balances, set_role_image, get_role_with_image,
    get_key_holders
)

KURATOR_ID = 164059195
DB_PATH = "/data/bot_data.sqlite"

def mention_html(user_id: int, fallback: str = "–£—á–∞—Å—Ç–Ω–∏–∫") -> str:
    return f"<a href='tg://user?id={user_id}'>{fallback}</a>"

async def handle_message(message: types.Message):
    if not message.text:
        return

    text = message.text.lower().strip()
    author_id = message.from_user.id

    if message.from_user.is_bot:
        return


    # --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
    match text:
        case "–º–æ–π –∫–∞—Ä–º–∞–Ω":
            await handle_moy_karman(message)
            return
        case "–º–æ—è —Ä–æ–ª—å":
            await handle_moya_rol(message)
            return
        case "—Ä–æ–ª—å" if message.reply_to_message:
            await handle_rol(message)
            return
        case "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
            await handle_list(message)
            return
        case "–∫–ª—É–±":
            await handle_klub(message)
            return
        case "—Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞":
            await handle_rating(message)
            return
        case "—á–ª–µ–Ω—ã –∫–ª—É–±–∞":
            await handle_club_members(message)
            return
        case "—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞":
            await handle_key_holders(message)
            return
        case _ if text.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å "):
            await handle_peredat(message)
            return
        case _ if text.startswith("—Å—Ç–∞–≤–ª—é"):
            await handle_kubik(message)
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ ---
    user_has_key = (author_id == KURATOR_ID) or await has_key(author_id)

    # --- –ö–æ–º–∞–Ω–¥—ã —Å –∫–ª—é—á–æ–º ---
    if user_has_key:
        if text.startswith(("–≤—Ä—É—á–∏—Ç—å ", "–≤—ã–¥–∞—Ç—å ")):
            await handle_vruchit(message)
            return
        if text.startswith(("–≤–∑—ã—Å–∫–∞—Ç—å ", "–æ—Ç–Ω—è—Ç—å ")):
            await handle_otnyat(message, text, author_id)
            return
        if text == "–∫–∞—Ä–º–∞–Ω":
            await handle_kurator_karman(message)
            return

    # --- –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –ö—É—Ä–∞—Ç–æ—Ä–∞ ---
    if author_id == KURATOR_ID:
        if text.startswith("–Ω–∞–∑–Ω–∞—á–∏—Ç—å ") and message.reply_to_message:
            await handle_naznachit(message)
            return
        if text == "—Å–Ω—è—Ç—å —Ä–æ–ª—å" and message.reply_to_message:
            await handle_snyat_rol(message)
            return
        if text == "–∫–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞" and message.reply_to_message:
            await handle_kluch(message)
            return
        if text == "—Å–Ω—è—Ç—å –∫–ª—é—á" and message.reply_to_message:
            await handle_snyat_kluch(message)
            return
        if text == "–æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±":
            await asyncio.sleep(1)
            await handle_clear_db(message)
            return
        if text.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"):
            await handle_obnulit_balansy(message)
            return
        if text.startswith("–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
            await handle_obnulit_balans(message)
            return

async def handle_moy_karman(message: types.Message):
    bal = await get_balance(message.from_user.id)
    await message.reply(f"–£ –í–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ ü™ô{bal} –Ω—É–∞—Ä–æ–≤.")

async def handle_moya_rol(message: types.Message):
    author_id = message.from_user.id
    try:
        role_row = await get_role_with_image(author_id)
    except Exception:
        role_info = await get_role(author_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None

    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_response = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_response, parse_mode="Markdown")
        else:
            if author_id == KURATOR_ID and os.path.exists("images/kurator.jpg"):
                try:
                    await message.reply_photo(photo=FSInputFile("images/kurator.jpg"), caption=text_response, parse_mode="Markdown")
                except Exception:
                    await message.reply(text_response, parse_mode="Markdown")
            else:
                await message.reply(text_response, parse_mode="Markdown")
    else:
        await message.reply("–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é.")

async def handle_rol(message: types.Message):
    target_id = message.reply_to_message.from_user.id
    try:
        role_row = await get_role_with_image(target_id)
    except Exception:
        role_info = await get_role(target_id)
        role_row = (role_info.get("role"), role_info.get("description"), None) if role_info else None

    if role_row:
        role_name, role_desc, image_file_id = role_row
        text_response = f"üé≠ *{role_name}*\n\n_{role_desc}_"
        if image_file_id:
            await message.reply_photo(photo=image_file_id, caption=text_response, parse_mode="Markdown")
        else:
            await message.reply(text_response, parse_mode="Markdown")
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –∫—Ç–æ —ç—Ç–æ.")

async def handle_klub(message: types.Message):
    await message.answer(
        "üé© <b>–ö–ª—É–± Le Cadeau Noir</b>\n"
        "<i>–í –ø–µ—Ä–µ–≤–æ–¥–µ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ ‚Äî ¬´–ß—ë—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫¬ª</i>\n\n"
        "üåë <b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:</b>\n"
        "–ó–∞–∫—Ä—ã—Ç—ã–π —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π Telegram-–∫–ª—É–± –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–∏–ª—è, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–∞—Ä–∫–æ–≤.\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ (–∏ –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–º–∏) –ø–æ–¥–∞—Ä–∫–∞–º–∏.\n"
        "–ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç, –∞ —Å–∏–º–≤–æ–ª —É–≤–∞–∂–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "üéì <b>–≠—Ç–∏–∫–µ—Ç:</b>\n"
        "–í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏, –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏ –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω–æ–≥–æ —à–∏–∫–∞.\n"
        "–ü—Ä—è–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –Ω–∞–º—ë–∫–∏, —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É –∏ —Å–∏–º–≤–æ–ª—ã.",
        parse_mode="HTML"
    )


async def handle_photo_command(message: types.Message):
    # –¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Ä–æ–ª–∏
    if message.from_user.id != KURATOR_ID:
        return
    if not (message.caption and message.photo):
        return

    text = message.caption.lower().strip()
    if text.startswith("—Ñ–æ—Ç–æ —Ä–æ–ª–∏") and message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        photo_id = message.photo[-1].file_id
        await set_role_image(target_user_id, photo_id)
        await message.reply("–§–æ—Ç–æ —Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# --- –ö–ª—é—á–µ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def handle_vruchit(message: types.Message):
    if message.reply_to_message:
        m = re.match(r"(?:–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å)\s+(-?\d+)", message.text.strip(), re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤—Ä—É—á–∏—Ç—å|–≤—ã–¥–∞—Ç—å 5'")
            return
        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –º–∏–Ω—É—Å.")
            return
        recipient = message.reply_to_message.from_user
        await change_balance(recipient.id, amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", message.from_user.id)
        await message.reply(
            f"üßÆ–Ø –≤—ã–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ {mention_html(recipient.id, recipient.full_name)}",
            parse_mode="HTML"
        )

async def handle_otnyat(message: types.Message, text: str, author_id: int):
    if message.reply_to_message:
        m = re.match(r"(?:–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å)\s+(-?\d+)", text, re.IGNORECASE)
        if not m:
            await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–≤–∑—ã—Å–∫–∞—Ç—å|–æ—Ç–Ω—è—Ç—å 3'")
            return
        amount = int(m.group(1))
        if amount <= 0:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –æ—Ç–Ω—è—Ç—å –º–∏–Ω—É—Å.")
            return

        recipient = message.reply_to_message.from_user
        current_balance = await get_balance(recipient.id)
        if amount > current_balance:
            await message.reply(f"–£ {recipient.full_name} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {current_balance}")
            return

        await change_balance(recipient.id, -amount, "–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", author_id)
        await message.reply(
            f"üßÆ–Ø –≤–∑—ã—Å–∫–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ —É {mention_html(recipient.id, recipient.full_name)}",
            parse_mode="HTML"
        )

async def handle_naznachit(message: types.Message):
    # –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–Ω–∞—á–∏—Ç—å "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏" –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
    m = re.match(r'–Ω–∞–∑–Ω–∞—á–∏—Ç—å\s+"([^"]+)"\s+(.+)', message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply('–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª')
        return
    role_name, role_desc = m.groups()

    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å, –ö—É—Ä–∞—Ç–æ—Ä?")
        return

    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, role_name, role_desc)
    uname = message.reply_to_message.from_user.username
    fname = message.reply_to_message.from_user.full_name
    mention = f"@{uname}" if uname else mention_html(user_id, fname)
    await message.reply(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '{role_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention}", parse_mode="HTML")

async def handle_snyat_rol(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ù–æ –∫–æ–≥–æ –º–Ω–µ –ª–∏—à–∏—Ç—å —Ä–æ–ª–∏, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await set_role(user_id, None, None)
    uname = message.reply_to_message.from_user.username
    fname = message.reply_to_message.from_user.full_name
    mention = f"@{uname}" if uname else mention_html(user_id, fname)
    await message.reply(f"–†–æ–ª—å —Å–Ω—è—Ç–∞ —É {mention}", parse_mode="HTML")

async def handle_kluch(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É –º–Ω–µ –≤—ã–¥–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await grant_key(user_id)
    uname = message.reply_to_message.from_user.username
    fname = message.reply_to_message.from_user.full_name
    mention = f"@{uname}" if uname else mention_html(user_id, fname)
    await message.reply(f"üóù–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –≤—ã–¥–∞–Ω {mention}", parse_mode="HTML")

async def handle_snyat_kluch(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–£ –∫–æ–≥–æ –º–Ω–µ –æ—Ç–æ–±—Ä–∞—Ç—å –∫–ª—é—á, –ö—É—Ä–∞—Ç–æ—Ä?")
        return
    user_id = message.reply_to_message.from_user.id
    await revoke_key(user_id)
    uname = message.reply_to_message.from_user.username
    fname = message.reply_to_message.from_user.full_name
    mention = f"@{uname}" if uname else mention_html(user_id, fname)
    await message.reply(f"üóù–ö–ª—é—á –æ—Ç —Å–µ–π—Ñ–∞ –æ—Ç–Ω—è—Ç —É {mention}", parse_mode="HTML")

async def handle_list(message: types.Message):
    try:
        with open("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.txt", "r", encoding="utf-8") as f:
            help_text = f.read()
        await message.reply(help_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

async def handle_rating(message: types.Message):
    rows = await get_top_users(limit=10)
    if not rows:
        await message.reply("–ù–∏ —É –∫–æ–≥–æ –≤ –∫–ª—É–±–µ –Ω–µ—Ç –Ω—É–∞—Ä–æ–≤.")
        return

    lines = ["üí∞ –ë–æ–≥–∞—Ç–µ–π—à–∏–µ —á–ª–µ–Ω—ã –∫–ª—É–±–∞ Le Cadeau Noir:\n"]
    for i, (user_id, balance) in enumerate(rows, start=1):
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{i}. {mention_html(user_id, name)} ‚Äî {balance} –Ω—É–∞—Ä–æ–≤")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_club_members(message: types.Message):
    rows = await get_all_roles()
    if not rows:
        await message.reply("–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–ª—É–±–µ –ø—É—Å—Ç–æ.")
        return

    lines = ["üé≠ <b>–ß–ª–µ–Ω—ã –∫–ª—É–±–∞:</b>\n"]
    for user_id, role in rows:
        # –∫–∞–∫ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass

        mention = mention_html(user_id, name)  # –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è, –Ω–µ @username
        lines.append(f"{mention} ‚Äî <b>{role}</b>")

    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_clear_db(message: types.Message):
    if message.from_user.id != KURATOR_ID:
        await message.reply("–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –∫–ª—É–±.")
        return
    try:
        await message.reply("üóë–ö–ª—É–± –æ–±–Ω—É–ª—è–µ—Ç—Å—è...")
        if os.path.exists(DB_PATH):
            os.remove(DB_PATH)
        await message.answer("üí¢–ö–æ–¥ –ê—Ä–º–∞–≥–µ–¥–æ–Ω. –ö–ª—É–± –æ–±–Ω—É–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —è –∏ –≤—ã, –ö—É—Ä–∞—Ç–æ—Ä.")
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏: {e}")

async def handle_obnulit_balans(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    user_id = message.reply_to_message.from_user.id
    await reset_user_balance(user_id)
    await message.reply("‚úÖ–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω—É–ª—ë–Ω.")

async def handle_obnulit_balansy(message: types.Message):
    await reset_all_balances()
    await message.reply("‚úÖ–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω—É–ª–µ–Ω—ã.")

async def handle_key_holders(message: types.Message):
    user_ids = await get_key_holders()
    if not user_ids:
        await message.reply("–ü–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–ª—é—á–∞.")
        return

    lines = ["üóùÔ∏è <b>–•—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∫–ª—é—á–∞:</b>\n"]
    for user_id in user_ids:
        name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)
            name = member.user.full_name or name
        except Exception:
            pass
        lines.append(f"{mention_html(user_id, name)}")
    await message.reply("\n".join(lines), parse_mode="HTML")

async def handle_peredat(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return

    m = re.match(r"–ø–µ—Ä–µ–¥–∞—Ç—å\s+(\d+)", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 10'")
        return

    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–∞—Ç—å –º–∏–Ω—É—Å.")
        return

    giver_id = message.from_user.id
    recipient = message.reply_to_message.from_user
    recipient_id = recipient.id

    # –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ
    if giver_id == recipient_id:
        await message.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∞—Ä—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–∞—Ä–∏—Ç–µ–ª—è
    balance = await get_balance(giver_id)
    if amount > balance:
        await message.reply(f"–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {balance}")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —É –¥–∞—Ä–∏—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    await change_balance(giver_id, -amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)
    await change_balance(recipient_id, amount, "–ø–µ—Ä–µ–¥–∞—á–∞", giver_id)

    giver_name = message.from_user.full_name
    recipient_name = recipient.full_name

    await message.reply(
        f"üí∏–Ø –ø–µ—Ä–µ–¥–∞–ª {amount} –Ω—É–∞—Ä–æ–≤ –æ—Ç {mention_html(giver_id, giver_name)} –∫ {mention_html(recipient_id, recipient_name)}",
        parse_mode="HTML"
    )

async def handle_kurator_karman(message: types.Message):
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∏–∫–µ—Ç –ö–ª—É–±–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    target = message.reply_to_message.from_user
    balance = await get_balance(target.id)

    await message.reply(
        f"üíº {mention_html(target.id, target.full_name)} —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–≤–æ—ë–º –∫–∞—Ä–º–∞–Ω–µ {balance} –Ω—É–∞—Ä–æ–≤.",
        parse_mode="HTML"
    )

async def handle_kubik(message: types.Message):

    m = re.match(r"^\s*—Å—Ç–∞–≤–ª—é\s+(\d+)\s+–Ω–∞\s+(?:üé≤|–∫—É–±–∏–∫)\s*$", message.text.strip(), re.IGNORECASE)
    if not m:
        await message.reply("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –ø–æ —ç—Ç–∏–∫–µ—Ç—É –ö–ª—É–±–∞. –ü—Ä–∏–º–µ—Ä: '–°—Ç–∞–≤–ª—é 10 –Ω–∞ üé≤|–∫—É–±–∏–∫'")
        return

    amount = int(m.group(1))
    if amount <= 0:
        await message.reply("–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É.")
        return

    gambler_id = message.from_user.id
    gambler_name = message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ª—É–¥–∏–∫–∞
    balance = await get_balance(gambler_id)
    if amount > balance:
        await message.reply(f"üîç–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∞—Ä–æ–≤. –ë–∞–ª–∞–Ω—Å: {balance}")
        return

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ —Å–µ—Ä–≤–µ—Ä–æ–º –¢–µ–ª–µ–≥—Ä–∞–º–∞
    sent: types.Message = await message.answer_dice(emoji="üé≤")
    roll_value = sent.dice.value  # 1..6

    await asyncio.sleep(3.5)
    if roll_value == 6:
        await change_balance(gambler_id, amount*3, "—Å—Ç–∞–≤–∫–∞", gambler_id)
        await message.reply(
            f"üéâ–§–æ—Ä—Ç—É–Ω–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ,{mention_html(gambler_id, gambler_name)}. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ü™ô{amount*3} –Ω—É–∞—Ä–æ–≤",
            parse_mode="HTML"
        )
    else:
        await change_balance(gambler_id, -amount, "—Å—Ç–∞–≤–∫–∞", gambler_id)
        await message.reply(
            f"ü™¶–°—Ç–∞–≤–∫–∏ –ø–æ–≥—É–±—è—Ç –≤–∞—Å, {mention_html(gambler_id, gambler_name)}. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ü™ô{amount} –Ω—É–∞—Ä–æ–≤.",
            parse_mode="HTML"
        )


